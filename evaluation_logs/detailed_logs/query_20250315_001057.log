DETAILED QUERY LOG - 2025-03-15 00:10:57
======================================================================

QUESTION: What versions of MySQL or MariaDB are compatible with Vitess?

ANSWER: ### Compatible Database Versions

Vitess supports the following database versions:
* **MySQL**: version 5.7 to 8.0, with experimental support for 8.4
* **Percona Server for MySQL**: version 5.7 to 8.0, with experimental support for 8.4
* **MariaDB**: versions 10.10+ 

Note that the collation environment of a Vitess cluster is defined by the MySQL server version flag provided to the VTGate and VTTablet instances.

METRICS:
  - Documents Retrieved: 3
  - Top Document Score: 0.9987503290176392
  - Response Time: 26835.69 ms
  - Retrieval Time (est.): 18784.98 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.9987503290176392
  Content:
----------------------------------------
Supported Databases For Imports Vitess supports importing from a wide range of databases that include: - [MySQL](https://www.mysql.com/) version 5.7 to 8.0. Experimental support for 8.4. - [Percona Server for MySQL](https://www.percona.com/software/mysql-database/percona-server) version 5.7 to 8.0. Experimental support for 8.4. - [MariaDB](https://mariadb.com) versions 10.10+ ## See also + [MySQL Compatibility](../../reference/compatibility/mysql-compatibility/) --- title: What Is Vitess weight: 1 featured: true --- Vitess is a database solution for deploying, scaling and managing large clusters of open-source database instances. It currently supports MySQL and Percona Server for MySQL. It's architected to run as effectively in a public or private cloud architecture as it does on dedicated hardware. It combines and extends many important SQL features with the scalability of a NoSQL database. Vitess can help you with the following problems: 1. Scaling a SQL database by allowing you to shard it, while keeping application changes to a minimum. 2. Migrating from bare-metal or VMs to a private or public cloud. 3. Deploying and managing a large number of SQL database instances. Vitess includes compliant JDBC and Go database drivers using a native query protocol. Additionally, it implements the MySQL server protocol which is compatible with virtually any other language. Vitess served all YouTube database traffic for over five years. Many enterprises have now adopted Vitess for their production needs. ## Features * Performance - Connection pooling - Multiplex front-end application queries onto a pool of MySQL connections to optimize performance. - Query de-duping – Reuse results of an in-flight query for any identical requests received while the in-flight query was still executing. - Transaction manager – Limit number of concurrent transactions and manage timeouts to optimize overall throughput. * Protection - Query rewriting and sanitization – Add limits and avoid non-deterministic updates. - Query blocking – Customize rules to prevent potentially problematic queries from hitting 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.9938967823982239
  Content:
----------------------------------------
the collations and charsets in the underlying MySQL server. On a basic level, this support means that Vitess handles gracefully textual Unicode columns and queries, and relays this information to MySQL clients without losing or corrupting the encoding of the data. On top of this, newer versions of Vitess are also capable of performing textual comparison and sorting operations in SQL queries directly on VTGate instances, greatly speeding up complex operations such as cross-shard joins. ### Supported collations The collation environment (i.e. the set of support collations and charsets) of a Vitess cluster is defined by the MySQL server version flag (`--mysql_server_version`) provided to the VTGate and VTTablet instances in the cluster. Higher (newer) MySQL versions will enable built-in support for more collations. The following table lists all of the supported collations in the current release of Vitess: | Legend | | |----|----| | ✅ | Vitess has full support for this collation. | | ⚠️ | The underlying MySQL (or compatible) database supports this collation, but Vitess does not. | | ❌ | Neither Vitess nor the underlying MySQL database supports this collation. | Using collations that are not supported by Vitess but implemented in the underlying MySQL instance can lead to unpredictable behavior. | Collation | Charset | MySQL 8.0 | MySQL 5.7 | MySQL 5.6 | MariaDB 10.3 | MariaDB 10.2 | MariaDB 10.1 | MariaDB 10.0 | |---|---|---|---|---|---|---|---|---| | big5_chinese_ci | big5 | ⚠️ | ⚠️ | ⚠️ | ⚠️ | ⚠️ | ⚠️ | ⚠️ | | latin2_czech_cs | latin2 | ⚠️ | ⚠️ | ⚠️ | ⚠️ | ⚠️ | ⚠️ | ⚠️ | | dec8_swedish_ci | dec8 | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | ✅ | | cp850_general_ci | cp850 | ✅ | ✅ | ✅ | 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.988959789276123
  Content:
----------------------------------------
replication if it is not running. ## What is semi-sync replication? Semi-sync replication enables you to prevent your primary from acknowledging a transaction to the client until a replica confirms that it has received all the changes. This adds an extra guarantee that at least one other machine has a copy of the changes. This addresses the problem of a combination of lagging replication and network issues resulting in data loss. With semi-sync replication, even if you have network issues you shouldn’t lose your data. Please do note that when using semi-sync replication you will have to wait for your data to flow from the primary to the replica and then get a confirmation back to the primary. Thus each transaction may take longer. The length of time depends on the round trip time from the primary to the replica. ## Why would I use semi-sync replication? Semi-sync replication ensures data durability between the primary and at least one replica. Hardware failures are unavoidable but don't need to result in data loss if you run with semi-sync replication. --- title: Advanced Configuration docs_nav_disable_expand: true weight: 10 --- --- title: Compatibility weight: 2 --- ## What versions of MySQL or MariaDB work with Vitess? Please refer to our [Supported Databases](https://vitess.io/docs/overview/supported-databases/) for the most up-to-date information. ## What does it mean to say that Vitess "is MySQL compatible"? Will my application "just work"? Vitess supports much of MySQL, with some limitations. **Depending on your MySQL setup you will need to adjust queries that utilize any of the current unsupported cases.** For SQL syntax there is a list of example [unsupported queries](https://github.com/vitessio/vitess/blob/main/go/vt/vtgate/planbuilder/testdata/unsupported_cases.json). There are some further [compatibility issues](https://vitess.io/docs/reference/mysql-compatibility/) beyond pure SQL syntax. ## How is Vitess different from MySQL? MySQL is a popular open source database solution. MySQL delivers a fast, multi-threaded, multi-user, 
----------------------------------------

