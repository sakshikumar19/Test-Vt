DETAILED QUERY LOG - 2025-03-15 22:39:50
======================================================================

QUESTION: How do I check the version of my Vitess build?

ANSWER: ### Checking the Version of Vitess Build
To check the version of your Vitess build, you can use the following SQL command:
```sql
select @@version;
```
This command will return the version of your Vitess build.

METRICS:
  - Documents Retrieved: 4
  - Top Document Score: 0.737102210521698
  - Response Time: 15544.8 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.737102210521698
  Content:
----------------------------------------
you need to do planned maintenance on the primary, it's best to first reparent to another replica with [`PlannedReparentShard`](../../reference/programs/vtctl/shards/#plannedreparentshard). --- title: Vitess sees the wrong tablet as primary description: Debug common issues with Vitess weight: 10 --- ## Vitess sees the wrong tablet as primary If you do a failover manually (not through Vitess), you'll need to tell Vitess which tablet corresponds to the new primary MySQL. Until then, writes will fail since they'll be routed to a read-only replica (the old primary). Use the [`TabletExternallyReparented`](../../reference/programs/vtctl/shards/#tabletexternallyreparented) command to tell Vitess the new primary tablet for a shard. Older versions of Vitess supported tools like [Orchestrator](https://github.com/github/orchestrator), which can be configured to call this automatically when a failover occurs. See our sample [orchestrator.conf.json](https://github.com/vitessio/vitess/blob/1129d69282bb738c94b8af661b984b6377a759f7/docker/orchestrator/orchestrator.conf.json#L131) for an example of this. --- title: Troubleshoot aliases: ['/docs/launching/troubleshooting/'] description: Debug common issues with Vitess weight: 2600 --- If there is a problem in the system, one or many alerts would typically fire. If a problem was found through means other than an alert, then the alert system needs to be iterated upon. When an alert fires, you have the following sources of information to perform your investigation: * Alert values * Graphs * Diagnostic URLs * Log files ### Find version of Vitess build ``` select @@version; ```
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.3138831555843353
  Content:
----------------------------------------
the vitessio/vitess repository </span> #### Check out the vitessio/vitess repository Clone the GitHub repository via: - SSH: `git clone git@github.com:vitessio/vitess.git`, or: - HTTP: `git clone https://github.com/vitessio/vitess.git` ```shell cd vitess ``` #### Build the docker image In your shell, execute: ```shell make docker_vttestserver ``` This creates 2 docker images named `vitess/vttestserver:mysql57` and `vitess/vttestserver:mysql80` ### <span style="color:red"> 2. Pulling from docker hub </span> Alternately, you can get the latest docker images from the docker hub. In your shell, execute: ```shell docker pull vitess/vttestserver:mysql57 docker pull vitess/vttestserver:mysql80 ``` ## Run the docker image At this point, you should have a docker image named `vitess/vttestserver:mysql57` or `vitess/vttestserver:mysql80`. ### Environment variables The docker image expects some of the environment variables to be set to function properly. The following table lists all the environment variables available along with their usages. | Environment variable | Required | Use | |---------------------------|----------|---------------------------------------------------------------------------------------------------------------------------------------------------| | *KEYSPACES* | yes | Specifies the names of the keyspaces to be created as a comma separated value. | | *NUM_SHARDS* | yes | Specifies the number of shards in each keyspace. It is a comma separated value as well, read in conjunction with the KEYSPACES. | | *PORT* | yes | The starting of the port addresses that vitess will use to register its components like vtgate, etc. | | *MYSQL_MAX_CONNECTIONS* | no | Maximum number of connections that the MySQL instance will support. If unspecified, it defaults to 1000. | | *MYSQL_BIND_HOST* | no | Which host to bind the MySQL listener to. If unspecified, it defaults to `127.0.0.1`. | | *VTCOMBO_BIND_HOST* | no | Which host to bind the vtcombo servenv listener to. If unspecified, it defaults to `127.0.0.1`. | | *MYSQL_SERVER_VERSION* | no | MySQL server version to advertise. If unspecified, it defaults to `8.0.31-vitess` or `5.7.9-vitess` according to the version of vttestserver run. | | *CHARSET* | no | Default charset to use. If unspecified, it defaults to `utf8mb4`. | | *FOREIGN_KEY_MODE* | no | This is to provide how to handle foreign key constraint in create/alter table. Valid values are: allow (default), disallow. | | *ENABLE_ONLINE_DDL* | no | Allow users to submit, review and control Online DDL. Valid values are: true (default), false. | | *ENABLE_DIRECT_DDL* | no | Allow users to submit direct DDL statements. Valid values are: true (default), false. | | *PLANNER_VERSION* | no | Sets the default planner to use when the session has not changed it. Valid values are: Gen4, Gen4Greedy, Gen4Left2Right. | | *TABLET_REFRESH_INTERVAL* | no | Interval at which vtgate refreshes tablet information from topology server. | Environment variables in docker can be specified using the `-e` aka `--env` flag. ### Sending queries to vttestserver container from outside The vtgate listens for MySQL connections on 3 + the `PORT` environment variable specified. i.e. if you specify `PORT` to be 33574, then vtgate will be listening to connections on 33577, on the `MYSQL_BIND_HOST` which defaults to localhost. But this port will be on the docker container side. To connect to vtgate externally from 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.1723983734846115
  Content:
----------------------------------------
--- title: Miscellaneous description: Miscellaneous design docs weight: 10 aliases: ['/docs/design/benchmark/'] --- This is a list of docs on the Vitess GitHub repo that have been, or are used as design documents and RFCs for various miscellaneous features. Some of these documents might not be representative of the current state of Vitess. - [Benchmarking, arewefastyet](https://github.com/vitessio/arewefastyet/blob/main/README.md) --- title: Online DDL description: Online DDL related documents weight: 2 aliases: ['/docs/design/lifecycle/', '/docs/reference/features/table-lifecycle'] --- This is a list of docs on the Vitess GitHub repo that have been, or are used as design documents and RFCs for various online DDL features. Some of these documents might not be representative of the current state of Vitess. - [Online DDL Scheduler](https://github.com/vitessio/vitess/blob/main/doc/design-docs/OnlineDDLScheduler.md) - [Safe Lazy DROP Tables](https://github.com/vitessio/vitess/blob/main/doc/design-docs/SafeLazyDropTables.md) --- title: Query Serving description: Query Serving related design docs weight: 1 aliases: ['/docs/design/query-serving/'] --- This is a list of issues on the Vitess GitHub repo that have been, or are used as design documents and RFCs for various query serving features. Some of these documents might not be representative of the current state of Vitess. - [Tracking CheckMySQL and Query Engine history](https://github.com/vitessio/vitess/issues/11885) - [optimize join & dml routing for reference tables](https://github.com/vitessio/vitess/issues/11864) - [VExplain RFC](https://github.com/vitessio/vitess/issues/11621) - [vtgate view support](https://github.com/vitessio/vitess/issues/11559) - [RFC: stateful throttler config & dynamic control over throttler](https://github.com/vitessio/vitess/issues/11316) - [Idea: Online DDL syntax to postpone execution of migrations, and per-shard execution](https://github.com/vitessio/vitess/issues/10899) - [Design: REVERT for fast ADD|DROP PARTITION for range partitioned tables](https://github.com/vitessio/vitess/issues/10317) - [schemadiff: tracking issue](https://github.com/vitessio/vitess/issues/10203) - [RFC: Handle reserved/tainted connections better](https://github.com/vitessio/vitess/issues/9706) - [RFC: Rollback of partial failed query in an explicit transaction](https://github.com/vitessio/vitess/issues/9266) - [vtgate schema tracking](https://github.com/vitessio/vitess/issues/7995) - [Simplify Engine Primitives - extract vindex lookup from routes](https://github.com/vitessio/vitess/issues/7799) - [RFC: VSchema based routing and resharding](https://github.com/vitessio/vitess/issues/4790) - [RFC: MultiColumn Vindexes](https://github.com/vitessio/vitess/issues/3481) - [RFC: SET Statements](https://github.com/vitessio/vitess/issues/6107) - [RFC: Locking functions](https://github.com/vitessio/vitess/issues/6367) - [RFC: Replica transactions](https://github.com/vitessio/vitess/issues/6166) - [Consistent Lookup Vindexes](https://github.com/vitessio/vitess/issues/4855) - [Owned Primary Vindex](https://github.com/vitessio/vitess/blob/main/doc/design-docs/OwnedPrimaryVindexes.md) - [Foreign Key Management in Vitess](https://github.com/vitessio/vitess/issues/12967) --- title: VReplication description: Selected VReplication related design docs weight: 3 aliases: ['/docs/design/vreplication/'] --- This is a list of issues on the Vitess GitHub repo that have been, or are used as design documents and RFCs for various vreplication features. Some of these documents might not be representative of the current state of Vitess. - [VDiff2: Reimplementing VDiff on tablets](https://github.com/vitessio/vitess/issues/10134) - [VStream Copy: streaming events from the beginning](https://github.com/vitessio/vitess/issues/6277) - [Cross-Cluster Data Migration](https://github.com/vitessio/vitess/issues/7545) - [File:Position based VReplication](https://github.com/vitessio/vitess/issues/5424) --- title: VTTablet description: VTTablet related documents weight: 4 aliases: ['/docs/design/vttablet/'] --- This is a list of docs on the Vitess GitHub repo that have been, or are used as design documents and RFCs for various VTTablet features. Some of these documents might not be representative of the current state of Vitess. - [Componentizing TabletServer](https://github.com/vitessio/vitess/blob/main/doc/design-docs/ComponentizingTabletServer.md) - [Real-time Parameter Changes](https://github.com/vitessio/vitess/blob/main/doc/design-docs/RealTimeParamsChange.md) - [Row-based Replication](https://github.com/vitessio/vitess/blob/main/doc/design-docs/RowBasedReplication.md) - [TabletManager Model](https://github.com/vitessio/vitess/blob/main/doc/design-docs/TabletManagerModel.md) - [TabletServer Params as YAML](https://github.com/vitessio/vitess/blob/main/doc/design-docs/TabletServerParamsAsYAML.md) - [Fast State Transitions](https://github.com/vitessio/vitess/blob/main/doc/design-docs/VTTabletFastStateTransitions.md) --- title: Design Docs description: Collection of Vitess design docs weight: 12000 cascade: designdoc: true aliases: ['/docs/design/'] ---
----------------------------------------

Document 4:
  Source: Unknown
  Score: 0.04207152500748634
  Content:
----------------------------------------
is greater than 100 milliseconds, it's color-coded red. If it is greater than 10 milliseconds, it is color coded yellow. Otherwise, it is color coded gray. * /debug/query\_stats is a JSON view of the per-query stats. This information is pulled in real-time from the query cache. The per-table stats in /debug/vars are a roll-up of this information. * /debug/tablet\_plans is a more static view of the query cache. It just shows how vttablet will process or rewrite the input query. * /livequeryz lists the currently running queries. You have the option to kill any of them from this page. #### /querylogz, /debug/querylog, /txlogz, /debug/txlog * /debug/querylog is a continuous stream of verbose execution info as each query is executed. This URL can generate a lot of data because it streams every query processed by vttablet. The details are as per this function: https://github.com/vitessio/vitess/blob/main/go/vt/vttablet/tabletserver/tabletenv/logstats.go#L179 * /querylogz is a limited human readable version of /debug/querylog. It prints the next 300 queries by default. The limit can be specified with a limit=N parameter on the URL. * /txlogz is like /querylogz, but for transactions. * /debug/txlog is the JSON counterpart to /txlogz. #### /debug/consolidations This URL has an MRU list of consolidations. This is a way of identifying if multiple clients are spamming the same query to a server. #### /schemaz, /debug/schema * /schemaz shows the schema info loaded by vttablet. * /debug/schema is the JSON version of /schemaz. #### /debug/query\_rules This URL displays the currently active query blacklist rules. ### Alerting Alerting is built on top of the variables you monitor. Before setting up alerts, you should get some baseline stats and variance, and then you can build meaningful alerting rules. You can use the following list as a guideline to build your own: * Query latency among all vttablets * Per keyspace latency * Errors/query * Memory usage * Unhealthy for too long * Too many vttablets down * Health has been flapping * Transaction pool full error rate * Any internal error * Traffic out of balance among replicas * QPS/core too high * High replication lag * Errant transactions * Primary is in read-only mode ## VTGate ### /debug/status This is the landing page for a vtgate, which gives you the status of how a particular server is doing. Of particular interest there is the list of tablets this vtgate process is connected to, as this is the list of tablets that can potentially serve queries. ### /debug/vars #### VTGateApi This is the main histogram variable to track for vtgates. It gives you a break up of all queries by command, keyspace, and type. #### HealthcheckConnections It shows the number of tablet connections for query/healthcheck per keyspace, shard, and tablet type. #### TopologyWatcherErrors and TopologyWatcherOperations These two variables track events related to how vtgate watches the topology. It is particularly important to monitor the error count. This can act as an early warning sign if a vtgate is not able to refresh the list of tablets from the topo. 
----------------------------------------

