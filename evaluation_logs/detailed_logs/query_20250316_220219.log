DETAILED QUERY LOG - 2025-03-16 22:02:19
======================================================================

QUESTION: How can you configure a vttablet to connect to a MySQL instance using TLS, and what flags are required to enforce server certificate validation?

ANSWER: ### Configuring vttablet to Connect to MySQL using TLS
To configure a vttablet to connect to a MySQL instance using TLS, you need to specify the following parameters:
* `--db_ssl_ca`: the path to the CA certificate
* `--db_flags`: a combination of MySQL flags to enable TLS and server certificate validation
* `--db_server_name`: the server name to match against the certificate common name (optional)

Example:
```bash
--db_ssl_ca /home/user/config/ca.crt
--db_flags 1073743872
--db_server_name mysql1
```
The `--db_flags` value `1073743872` is a combination of the MySQL `CLIENT_SSL` (2048) and `CLIENT_SSL_VERIFY_SERVER_CERT` flags (1073741824), which enables TLS encryption and server certificate validation.

If you only want to encrypt the connection without validating the server certificate, you can use the `--db_flags` value `2048` instead:
```bash
--db_flags 2048
```
Note that the `--db_server_name` parameter is only necessary if the certificate common name does not match the DNS name used by vttablet to connect to the MySQL server.

METRICS:
  - Documents Retrieved: 4
  - Top Document Score: 0.9996864795684814
  - Response Time: 15104.94 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.9996864795684814
  Content:
----------------------------------------
to require all TCP/IP clients to use TLS, you can use the MySQL server option `require_secure_transport`, or you can enforce it on a per MySQL user basis by using the `REQUIRE SSL` option when creating or altering a MySQL-level user. See the MySQL documentation for details. Restart your MySQL server to make these MySQL server option configuration changes active. Now, configure vttablet to connect to MySQL using the necessary parameters, verifying the CA certificate: ```bash $ cp /home/user/CA/pki/ca.crt ~/config/ ``` Add the vttablet parameters: ``` --db_ssl_ca /home/user/config/ca.crt --db_flags 1073743872 --db_server_name mysql1 ``` Restart the vttablet. Note that the `db_server_name` parameter value will differ depending on your issued certificate common name; and is unnecessary if the certificate common name matches the DNS name vttablet is using to connect to the MySQL server. The `1073743872` is a combination of the MySQL `CLIENT_SSL` (2048) and `CLIENT_SSL_VERIFY_SERVER_CERT` flags (1073741824); which means "encrypt the connection to MySQL *and* verify the SSL cert presented by the server". If you just wish to encrypt the vttablet -> MySQL server communication and you do not care about server certificate validation, you can just use this vttablet flag instead: ``` --db_flags 2048 ``` Note that using the above `db_flags` will also result in the MySQL to MySQL communication for replication between the replica/rdonly instances of a Vitess shard and its primary to be encrypted, as long as the upstream MySQL instance the replica is connecting to has been configured correctly to support TLS MySQL protocol connections (see above). ## vttablet data and control paths In Vitess, communication between vtgate and vttablet instances are via gRPC. gRPC uses HTTP/2 as a transport protocol, but by default this is not encrypted in Vitess. To secure this data path you need to, at a minimum, configure TLS for gRPC on the server (vttablet) side. Other components, as detailed above, also connect to vttablet via gRPC. After configuring vttablet gRPC for TLS, you will need to configure all these components (vtgate, other vttablets, vtctld) explicitly to connect using TLS to vttablet via gRPC, or you will have a partially or wholly non-functional system. #### vtgate to vttablet First, generate a certificate for use by vttablet: ```bash $ cd ~/CA/ $ ./easyrsa gen-req vttablet1 nopass Note: using Easy-RSA configuration from: /home/user/CA/vars Using SSL: openssl OpenSSL 1.1.1g FIPS 21 Apr 2020 Generating a RSA private key ..................................+++++ .....+++++ writing new private key to '/home/user/CA/pki/easy-rsa-209692.tdDNNt/tmp.hwhw8x' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [US]: State or Province Name (full name) [California]: Locality Name (eg, city) [Mountain View]: Organization Name (eg, company) [PlanetScale Inc]: Organizational Unit Name (eg, section) [Operations]: Common Name (eg: your 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.9802651405334473
  Content:
----------------------------------------
Cipher in use is ECDHE-RSA-AES128-GCM-SHA256 Current pager: stdout Using outfile: '' Using delimiter: ; Server version: 5.7.9-Vitess MySQL Community Server - GPL Protocol version: 10 Connection: 127.0.0.1 via TCP/IP . . ``` The above MySQL CLI output shows that the connection is encrypted, and that the server (vtgate) was successfully validated using the CA certificate. If the server certificate could not be validated using the CA certificate, an error similar to this would have been seen: ``` ERROR 2026 (HY000): SSL connection error: error:14090086:SSL routines:SSL3_GET_SERVER_CERTIFICATE:certificate verify failed ``` If TLS was not setup on the vtgate at all, an error like this could have resulted: ``` ERROR 2026 (HY000): SSL connection error: SSL is required but the server doesn't support it ``` ### vttablet to MySQL A common Vitess deployment model is to co-locate vttablet and MySQL on the same host/VM/container. In a case like this, vttablet connectivity to MySQL will be via local unix socket or TCP connection on localhost. It is unnecessary to configure encryption between vttablet and MySQL in this case, since the traffic never leaves the local machine/VM. However, in some deployment models vttablet and MySQL are running on different hosts, and you may want vttablet to use TLS to speak to MySQL. We will not cover configuring MySQL to use TLS certificates extensively here, just the minimum. Please consult the MySQL documentation for further information. Again, we will also assume that vttablet will be using MySQL username/password client authentication. Note that when you are configuring TLS and MySQL you will need to be aware of what TLS versions are supported. You may be using an [older version of MySQL that does not have TLS 1.2 support](https://docs.aws.amazon.com/AmazonRDS/latest/UserGuide/CHAP_MySQL.html#MySQL.Concepts.SSLSupport). If you need to support pre 1.2 TLS [vtgate supports ](https://github.com/vitessio/vitess/blob/de7f133dbe2dd6a7910f13c682910a4f5c0ac0df/go/vt/vtgate/plugin_mysql_server.go#L67)that setting using `--mysql_server_tls_min_version` and vttablet supports that setting using `--db_tls_min_version=TLSv1.1` Generate a server certificate for our MySQL instance using our CA: ```bash $ cd ~/CA/ $ ./easyrsa gen-req mysql1 nopass . . . Keypair and certificate request completed. Your files are: req: /home/user/CA/pki/reqs/mysql1.req key: /home/user/CA/pki/private/mysql1.key $ ./easyrsa sign-req server mysql1 . . . Write out database with 1 new entries Data Base Updated Certificate created at: /home/user/CA/pki/issued/mysql1.crt ``` Copy the files `/home/user/CA/pki/private/mysql1.key` and `/home/user/CA/pki/issued/mysql1.crt` to the MySQL server in the appropriate locations, securing their ownership and permissions appropriately. Configure the MySQL server options `ssl-key` and `ssl-cert` appropriately to point to where you placed the private key and certificate above. You can read more about it [here](https://dev.mysql.com/doc/mysql-security-excerpt/8.0/en/using-encrypted-connections.html) Note that these options do not require clients to use TLS, but is optional. If you need to require all TCP/IP clients to use TLS, you can use the MySQL server option `require_secure_transport`, or you can enforce it on a per MySQL user basis by using the `REQUIRE SSL` option when creating or altering a MySQL-level user. See the MySQL documentation for details. Restart your MySQL server to make these MySQL server option configuration changes active. Now, configure vttablet to connect to MySQL using the necessary parameters, verifying the CA certificate: ```bash 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.6566696166992188
  Content:
----------------------------------------
the data, meta-data and control paths enumerated above, they use one of three protocols: * MySQL binary protocol * gRPC (using HTTP/2 as transport) * HTTP ## Encryption All three the protocol types above use TLS in one form or another to encrypt communications. Therefore the basics around encrypting a specific client to server communication is straightforward: * Server-side: * Generate a CA private key and cert as the root for your certificate hierarchy. * (optionally) Generate intermediate keys to serve as signing keys for your server certificates. We will not cover this case in this document. * Generate a private key for the server component involved. * Generate a CSR using the private key. * Use the CA key material and the CSR to generate/sign the server certificate. * Install the server cert and private key using the appropriate Vitess options for the component in question. * If required, adjust other Vitess component options to enforce/require TLS-only communications. ## Server authentication In addition to encrypting the connection, you may want or need to configure client-side server authentication. This is the process by which the client verifies that the server it is trying to establish a TLS connection to is who they claim to be, and not an imposter or man-in-the-middle. We achieve this by: * Client-side: * Install the CA cert used by your certificate issuing process to sign the server component certificates. * Adjust the Vitess client component options to verify the server certificate using the installed CA cert. This would typically involve specifying the CA cert, as well as the server or common name to expect from the server component, if it isn't the same as the DNS name (or has an IP SAN configured). ## Client authentication Client authentication in Vitess can take two forms, depending on the protocol in question: * TLS client certificate authentication (also known as mTLS) * Username/password authentication; this is only an option for the connections involving the MySQL protocol. ## Walkthroughs We will now cover how to setup the various TLS component combinations. We will start with the data path, then move on to the control paths. We will handle [encryption](#encryption) and [server authentication](#server-authentication) together, and then handle [client authentication](#client-authentication) separately. ### Certificate generation As discussed above, large organizations will often have established tools to secure a TLS certificate hierarchy and issue certificates. For the purpose of these walkthroughs, we could use bare `openssl` commands to step through every detail. However, since we consider this an implementation detail that is likely to vary from user to user, we will leverage a shell-script-based tool called [easy-rsa](https://github.com/OpenVPN/easy-rsa) that uses `openssl` under the covers, and hides much of the complexity. This tool has been around for many years as part of the OpenVPN project, and can perform all the steps to setup a CA, generate server certificates and also client certificates if desired. Since `easy-rsa` is just a set of shell scripts, if you require a closer understanding of how every step works, 
----------------------------------------

Document 4:
  Source: Unknown
  Score: 0.5643956661224365
  Content:
----------------------------------------
have configured TLS on the vttablet side, you may see errors like this in the vttablet logs: ``` W1004 13:34:16.352458 212354 server.go:650] grpc: Server.Serve failed to complete security handshake from "[::1]:51492": tls: first record does not look like a TLS handshake ``` Conversely, if you have configured the TLS parameters on the vtgate side and the vtgate instance is still trying to connect to vttablet instances that are not configured with the correct TLS options, you might see errors like this in the vtgate logs: ``` W1004 14:38:29.383672 214179 tablet_health_check.go:323] tablet cell:"zone1" uid:101 healthcheck stream error: Code: UNAVAILABLE vttablet: rpc error: code = Unavailable desc = all SubConns are in TransientFailure, latest connection error: connection error: desc = "transport: authentication handshake failed: tls: first record does not look like a TLS handshake" ``` In case of VTOrc, you will need to add following to VTOrc instance to successfully connect to this vttablet instance ``` --tablet_manager_grpc_server_name vttablet1 --tablet_manager_grpc_ca /home/user/config/ca.crt ``` #### vttablet to vtablet: vreplication within or across shards For vreplication to work between vttablet instances once the gRPC server TLS options above are activated, you will need to add the following additional vttablet options: ``` --tablet_grpc_server_name vttablet1 --tablet_grpc_ca /home/user/config/ca.crt ``` Since each vttablet instance may need to talk to more than one other vttablet instances for vreplication streams, the implication is that each vttablet instances needs to either: * Use the same vttablet server key material and server certificate common name for each vttablet instance. This is obviously the easiest option, but might not conform to your compliance requirements. * or, ensure each vttablet server certificate common name or IP SAN matches the DNS name or IP it it accessed via. In this case, you can omit the use of the `--tablet_grpc_server_name` above for vttablet, and also for vtgate. #### vtctld to vttablet Once your vttablet(s) are configured with gRPC server TLS options as above, you will need to also add TLS client options to vtctld, or vtctld will be unable to connect to your vttablet(s). * To achieve this, add the following options to the vtctld commandline: ``` --tablet_grpc_server_name vttablet1 --tablet_grpc_ca /home/user/config/ca.crt --tablet_manager_grpc_server_name vttablet1 --tablet_manager_grpc_ca /home/user/config/ca.crt ``` ### vtctldclient to vtctld The communication from vtctldclient to vtctld is also via gRPC, so the method for securing it is similar to vtctld to vttablet above. Generate a server certificate for vtctld: ```bash $ cd ~/CA/ $ ./easyrsa gen-req vtctld1 nopass Note: using Easy-RSA configuration from: /home/user/CA/vars Using SSL: openssl OpenSSL 1.1.1g FIPS 21 Apr 2020 Generating a RSA private key ..................................................+++++ ....................................................+++++ writing new private key to '/home/user/CA/pki/easy-rsa-234817.QW1l8f/tmp.REK9r3' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [US]: 
----------------------------------------

