DETAILED QUERY LOG - 2025-03-16 22:55:37
======================================================================

QUESTION: How does VTOrc detect and recover from a "DeadPrimary" scenario, and what durability policies must be in place for this recovery to work?

ANSWER: ### VTOrc Detection and Recovery from "DeadPrimary" Scenario

VTOrc detects a "DeadPrimary" scenario when the primary tablet is dead. In this case, VTOrc runs the `EmergencyReparentShard` process to elect a different primary tablet.

### Durability Policies for Recovery

For VTOrc to recover from a "DeadPrimary" scenario, the durability policies must be set to allow for automatic failover. The specific durability policies required are not specified in the provided context, but it is mentioned that all failovers performed by VTOrc will honor the [durability policies](../../configuration-basic/durability_policy).

It is recommended to carefully set the desired durability policies for your keyspace, as this will affect what situations VTOrc can recover from and what situations will require manual intervention. 

To determine the exact durability policies required, please refer to the [durability policy](../../configuration-basic/durability_policy) documentation.

METRICS:
  - Documents Retrieved: 4
  - Top Document Score: 0.9506857991218567
  - Response Time: 21452.42 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.9506857991218567
  Content:
----------------------------------------
`DeadPrimary` | VTOrc detects when the primary tablet is dead | VTOrc runs EmergencyReparentShard to elect a different primary | | `PrimaryIsReadOnly`, `PrimarySemiSyncMustBeSet`, `PrimarySemiSyncMustNotBeSet` | VTOrc detects when the primary tablet has configuration issues like being read-only, semi-sync being set or not being set | VTOrc fixes the configurations on the primary. | | `NotConnectedToPrimary`, `ConnectedToWrongPrimary`, `ReplicationStopped`, `ReplicaIsWritable`, `ReplicaSemiSyncMustBeSet`, `ReplicaSemiSyncMustNotBeSet` | VTOrc detects when a replica has configuration issues like not being connected to the primary, connected to the wrong primary, replication stopped, replica being writable, semi-sync being set or not being set | VTOrc fixes the configurations on the replica. | ### Flags For a full list of supported flags, please look at [VTOrc reference page](../../../reference/programs/vtorc). ### UI, API and Metrics For information about the UI, API and metrics that VTOrc exports, please consult this [page](../../../reference/vtorc/ui_api_metrics). ### Example invocation of VTOrc You can bring VTOrc using the following invocation: ```sh vtorc --topo_implementation etcd2 \ --topo_global_server_address "localhost:2379" \ --topo_global_root /vitess/global \ --port 15000 \ --log_dir=${VTDATAROOT}/tmp \ --recovery-period-block-duration "10m" \ --instance-poll-time "1s" \ --topo-information-refresh-duration "30s" \ --alsologtostderr ``` You can optionally add a `clusters_to_watch` flag that contains a comma separated list of keyspaces or `keyspace/shard` values. If specified, VTOrc will manage only those clusters. ### Durability Policies All the failovers that VTOrc performs will be honoring the [durability policies](../../configuration-basic/durability_policy). Please be careful in setting the desired durability policies for your keyspace because this will affect what situations VTOrc can recover from and what situations will require manual intervention. ### Running VTOrc using the Vitess Operator To find information about deploying VTOrc using Vitess Operator please take a look at this [page](../../../reference/vtorc/running_with_vtop). --- title: VTTablet and MySQL weight: 8 --- Let us assume that we want to bring up a single unsharded keyspace. The first step is to identify the number of replicas (including the primary) we would like to deploy. We should also make a decision about how to distribute them across the cells. Vitess requires you to assign a globally unique id (tablet UID) to every vttablet. This has to be an unsigned 32-bit integer. This is a legacy requirement derived from the fact that the MySQL server id (also an unsigned 32-bit integer) used to be the same as the tablet uid. This is not the case any more. In terms of mapping these components to machines, Vitess allows you to run multiple of these on the same machine. If this is the case, you will need to assign non-conflicting ports for these servers to listen on. VTTablet and MySQL are meant to be brought up as a pair within the same machine. By default, vttablet will connect to its MySQL over a unix socket. Let us look at the steps to bring up the first pair for an unsharded keyspace `commerce` in cell1 and a tablet uid of 100. ## Starting MySQL `mysqlctl` is a convenience wrapper that can bring up and initialize a fresh MySQL server, and isolate all associated files within directories that are tied to 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.29108864068984985
  Content:
----------------------------------------
instances and takes appropriate actions. - These are then fixed by issuing RPCs to the associated `vttablets` ```mermaid stateDiagram-v2 start: Collect Information topoServer: Topology Server vttablets: Vttablets infoCollected: Information Received problems: Problems Found fixes: Run Fixes start --> topoServer: Every <code>topo-information-refresh-duration</code> start --> vttablets: Every <code>instance-poll-time</code> topoServer --> infoCollected: Keyspace and Vttablet records vttablets --> infoCollected: MySQL information infoCollected --> problems: Analyze collected information problems --> fixes: RPCs to Vttablets ``` # Coordination among VTOrc instances and `vtctld` Users are encouraged to run multiple instances of VTOrc monitoring the same cluster because VTOrc too, like any other service is liable to failure for reasons out of its control. Also, users run `vtctld` instances which can be used to run commands which alter the desired topology ([PlannedReparentShard](../../../user-guides/configuration-advanced/reparenting/#plannedreparentshard-planned-reparenting)) and durability requirements ([SetKeyspaceDurabilityPolicy](../../programs/vtctldclient/vtctldclient_setkeyspacedurabilitypolicy/)). The most logical question that arises is how do we ensure coordination between multiple VTOrc instances and `vtctld`. We do so by using the existing central topology-server. Each of these services, acquire a shard lock before it proceeds to run any fixes. This ensures that there is only one actor at any given point of time trying to alter the cluster. Another cause of concern could be recoveries run on stale data collected by VTOrc. Since VTOrc instances use a polling method to load the information they use for fault detection, they can sometimes read outdated information. To prevent VTOrc instances from running incorrect/unnecessary recoveries, all VTOrc instances refresh their local information that they require for the fix after acquiring a shard lock. --- title: Running with Vitess Operator description: How to configure Vitess Kubernetes Operator to run VTOrc --- ## Get Started The Vitess operator deploys one VTOrc instance for each keyspace that it is configured for. Please look at the [VTOrc reference page](../../programs/vtorc) to know all the flags that VTOrc accepts. ## Configuring VTOrc in Vitess Operator The VTOrc can be configured to run for a given keyspace by specifying the `vitessOrchestrator` specification as part of the `keyspace` spec. Resource limits and requests can be specified as part of the configuration and the default behaviour of VTOrc can be changed by specifying any desired flags in the `extraFlags` field. The VTOrc UI runs on the port `15000` of the container and port-forwarding can be setup to access it. ## Example Configuration An example deployment from the VTOrc [end to end test](https://github.com/planetscale/vitess-operator/tree/main/test/endtoend) on the Vitess Operator looks like: ```yaml keyspaces: - name: commerce durabilityPolicy: semi_sync turndownPolicy: Immediate vitessOrchestrator: resources: limits: memory: 128Mi requests: cpu: 100m memory: 128Mi extraFlags: recovery-period-block-duration: 5s ``` The full configuration file is available [here](https://github.com/planetscale/vitess-operator/blob/main/test/endtoend/operator/101_initial_cluster_vtorc_vtadmin.yaml). --- title: UI, API and Metrics --- # UI In order to use UI, `--port` flag has to be provided. Currently, the `/debug/status` lists the recent recoveries that VTOrc has performed. ![VTOrc-recent-recoveries](../img/VTOrc-Recent-Recoveries.png) # APIs VTOrc supports the following APIs which can be used for monitoring and changing the behaviour of VTOrc. | New API | Additional notes | |----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `/api/problems` | This API lists all the instances that have any 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.2882903814315796
  Content:
----------------------------------------
file is available [here](https://github.com/planetscale/vitess-operator/blob/main/test/endtoend/operator/101_initial_cluster_vtorc_vtadmin.yaml). --- title: UI, API and Metrics --- # UI In order to use UI, `--port` flag has to be provided. Currently, the `/debug/status` lists the recent recoveries that VTOrc has performed. ![VTOrc-recent-recoveries](../img/VTOrc-Recent-Recoveries.png) # APIs VTOrc supports the following APIs which can be used for monitoring and changing the behaviour of VTOrc. | New API | Additional notes | |----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `/api/problems` | This API lists all the instances that have any problems in them. The problems range from replication not running to errant GTIDs. The new API also supports filtering using the keyspace and shard name | | `/api/disable-global-recoveries` | This API disables the global recoveries in VTOrc. This makes it so that VTOrc doesn't repair any failures it detects. | | `/api/enable-global-recoveries` | This API enables the global recoveries in VTOrc. | | `/debug/health` | This API outputs the health of the VTOrc process. | | `/debug/liveness` | This API outputs the liveness of the VTOrc process. | | `/api/replication-analysis` | This API shows the replication analysis of VTOrc. Output is in JSON format. | | `/api/errant-gtids` | This API shows the tablets that have errant GTIDs as detected by VTOrc. Output is in JSON format. This API supports filtering by keyspace and shard name. | | `/api/database-state` | This API shows the internal database state of VTOrc. This API can be used to debug VTOrc. | # Metrics Metrics are available to be seen on the `/debug/vars` page. VTOrc exports the following metrics: | Metric | Usage | |------------------------------------|-----------------------------------------------------------------------------------------------------------------------------------------| | `PendingRecoveries` | The number of recoveries in progress which haven't completed. | | `RecoveriesCount` | The number of recoveries run. This is further subdivided for all the different recoveries. | | `SuccessfulRecoveries` | The number of succesful recoveries run. This is further subdivided for all the different recoveries. | | `FailedRecoveries` | The number of recoveries that failed. This is further subdivided for all the different recoveries. | | `ErrantGtidTabletCount` | The number of tablets with errant GTIDs as detected by VTOrc. | | `DetectedProblems` | Binary gauge that shows the active problems that VTOrc has detected. This is further subdivided by TabletAlias, Keyspace, and Shard. | | `planned_reparent_counts` | Number of times Planned Reparent Shard has been run. It is further subdivided by the keyspace, shard and the result of the operation. | | `emergency_reparent_counts` | Number of times Emergency Reparent Shard has been run. It is further subdivided by the keyspace, shard and the result of the operation. | | `reparent_shard_operation_timings` | Timings of reparent shard operations indexed by the type of operation. | {{< info >}} If there is some information about VTOrc that you would like to see on the `/debug/status` page or support for some API or metrics to be added, please let us know in [slack](https://vitess.io/slack) in the [#feat-vtorc](https://vitess.slack.com/archives/C02GSRZ8XAN) channel {{< /info >}} --- title: VTOrc weight: 9 --- --- title: User Guides description: Task-based guides for common usage scenarios weight: 4 aliases: ['/user-guide/client-libraries.html', '/docs/user-guides/'] --- We recommend 
----------------------------------------

Document 4:
  Source: Unknown
  Score: 0.08818235993385315
  Content:
----------------------------------------
the config file (without extension) to search for. (default "vtconfig") --config-path strings Paths to search for config files in. (default [{{ .Workdir }}]) --config-persistence-min-interval duration minimum interval between persisting dynamic config changes back to disk (if no change has occurred, nothing is done). (default 1s) --config-type string Config file type (omit to infer config type from file extension). --consul_auth_static_file string JSON File to read the topos/tokens from. --emit_stats If set, emit stats to push-based monitoring and stats backends --enable-primary-disk-stalled-recovery Whether VTOrc should detect a stalled disk on the primary and failover --grpc-dial-concurrency-limit int Maximum concurrency of grpc dial operations. This should be less than the golang max thread limit of 10000. (default 1024) --grpc_auth_static_client_creds string When using grpc_static_auth in the server, this file provides the credentials to use to authenticate with server. --grpc_compression string Which protocol to use for compressing gRPC. Default: nothing. Supported: snappy --grpc_enable_tracing Enable gRPC tracing. --grpc_initial_conn_window_size int gRPC initial connection window size --grpc_initial_window_size int gRPC initial window size --grpc_keepalive_time duration After a duration of this time, if the client doesn't see any activity, it pings the server to see if the transport is still alive. (default 10s) --grpc_keepalive_timeout duration After having pinged for keepalive check, the client waits for a duration of Timeout and if no activity is seen even after that the connection is closed. (default 10s) --grpc_max_message_size int Maximum allowed RPC message size. Larger messages will be rejected by gRPC with the error 'exceeding the max size'. (default 16777216) --grpc_prometheus Enable gRPC monitoring with Prometheus. -h, --help help for vtorc --instance-poll-time duration Timer duration on which VTOrc refreshes MySQL information (default 5s) --keep_logs duration keep logs for this long (using ctime) (zero to keep forever) --keep_logs_by_mtime duration keep logs for this long (using mtime) (zero to keep forever) --lameduck-period duration keep running at least this long after SIGTERM before stopping (default 50ms) --lock-timeout duration Maximum time to wait when attempting to acquire a lock from the topo server (default 45s) --log_backtrace_at traceLocations when logging hits line file:N, emit a stack trace --log_dir string If non-empty, write log files in this directory --log_err_stacks log stack traces for errors --log_rotate_max_size uint size in bytes at which logs are rotated (glog.MaxSize) (default 1887436800) --logtostderr log to standard error instead of files --max-stack-size int configure the maximum stack size in bytes (default 67108864) --onclose_timeout duration wait no more than this for OnClose handlers before stopping (default 10s) --onterm_timeout duration wait no more than this for OnTermSync handlers before stopping (default 10s) --pid_file string If set, the process will write its pid to the named file, and delete it on graceful shutdown. --port int port for the server --pprof strings enable profiling --pprof-http enable pprof http endpoints --prevent-cross-cell-failover Prevent VTOrc from promoting a primary in a different cell than the current primary in case of a failover --purge_logs_interval duration how often try to remove old logs (default 1h0m0s) --reasonable-replication-lag duration Maximum replication lag on replicas which is deemed to be acceptable (default 10s) --recovery-poll-duration duration Timer duration on which 
----------------------------------------

