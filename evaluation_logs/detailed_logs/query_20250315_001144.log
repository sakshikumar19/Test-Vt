DETAILED QUERY LOG - 2025-03-15 00:11:44
======================================================================

QUESTION: Are foreign keys supported in Vitess?

ANSWER: ### Foreign Key Support in Vitess

Yes, foreign keys are supported in Vitess, but with certain limitations. Vitess can ensure that related rows live in the same shard by making them share a common Unique Vindex. However, foreign key constraints across shards or keyspaces are not supported.

**Key Limitations:**

* Foreign key constraints are only supported within a shard, not across shards.
* Overuse of foreign key constraints is generally discouraged in MySQL.
* Cyclic foreign keys are rejected by Vitess to prevent endless loops.

You can enforce foreign key constraints within each shard at the MySQL level and configure cascade deletes as needed. For more information on foreign keys in Vitess, you can refer to the [foreign keys](../foreign-keys) page.

METRICS:
  - Documents Retrieved: 3
  - Top Document Score: 0.9988915324211121
  - Response Time: 11280.98 ms
  - Retrieval Time (est.): 7896.69 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.9988915324211121
  Content:
----------------------------------------
pname | +---------+----------+----------+ | alice | gift | monitor | | alice | gift | keyboard | | bob | work | monitor | | charlie | personal | keyboard | | dan | personal | monitor | +---------+----------+----------+ 5 rows in set (0.01 sec) ``` Although the underlying work performed by Vitess is not visible here, you can see it in the bottom right panel if using the demo app. Alternatively, you can also stream this information with the following command: ```text curl localhost:12345/debug/querylog [verbose output not shown] ``` ### Foreign Keys More generically stated: If a table has a foreign key into another table, then Vitess can ensure that the related rows live in the same shard by making them share a common Unique Vindex. In cases where you choose to group rows based on their foreign key relationships, you have the option to enforce those constraints within each shard at the MySQL level. You can also configure cascade deletes as needed. However, overuse of foreign key constraints is generally discouraged in MySQL. Foreign key constraints across shards or keyspaces are not supported in Vitess. For example, you cannot specify a foreign key between `corder.product_id` and `product.product_id`. A more detailed analysis of foreign keys in Vitess can be found on the [foreign keys](../foreign-keys) page. ### Many-to-Many relationships In the case where a table has relationships with multiple other tables, you can only choose one of those relationships for shard grouping. All other relationships will end up being cross-shard, and will incur cross-shard penalties. If a table has strong relationships with multiple other tables, and if performance becomes a challenge choosing either way, you can explore the [VReplication Materialization](../../../reference/vreplication/materialize) feature that allows you to materialize a table both ways. ### Enforcing Uniqueness To enforce global uniqueness for a row 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.9983751773834229
  Content:
----------------------------------------
foreign keys](https://github.com/vitessio/vitess/issues/12967). #### Limitations - Currently, Vitess only supports shard-scoped foreign key constraints even in the `managed` mode. Support for cross-shard foreign keys is planned for a future release. - [OnlineDDL](../../schema-changes/managed-online-schema-changes/) doesn't work well with tables that have foreign key constraints on them. - Some query syntaxes like `REPLACE INTO` and `INSERT INTO ... ON DUPLICATE KEY UPDATE` aren't supported. - Cyclic foreign keys are rejected by Vitess. #### Unsupported cyclic foreign keys In this foreign key mode, Vitess limits support for certain schema patterns to prevent scenarios where the planner might enter an endless loop. Vitess employs a method to identify circular dependencies among foreign keys by creating a directed graph. In this graph, each node symbolizes a database column, while each directed edge signifies a dependency between two columns; specifically, an update to the origin column may necessitate an update to the destination column. We apply various strategies depending on the foreign key reference operations. There are three scenarios when constructing the graph to check for cycles: 1. `ON DELETE RESTRICT ON UPDATE RESTRICT`: In this scenario, no modifications are required on the dependent table when deleting or updating the parent table. Since the presence of the value is the only requirement, no edges are added to the graph in this case. 2. `ON DELETE SET NULL`, `ON UPDATE SET NULL`, `ON UPDATE CASCADE`: In this situation, any modifications to the parent table columns involved in the foreign key relationship will trigger corresponding updates or deletions across all related columns in the child table. Therefore, we introduce edges from every column in the parent table to every related column in the child table. 3. `ON DELETE CASCADE`: In this unique situation, deleting rows in the parent table will impact all columns in the child table associated with the 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.9978398084640503
  Content:
----------------------------------------
that utilize any of the current unsupported cases.** For SQL syntax there is a list of example [unsupported queries](https://github.com/vitessio/vitess/blob/main/go/vt/vtgate/planbuilder/testdata/unsupported_cases.json). There are some further [compatibility issues](https://vitess.io/docs/reference/mysql-compatibility/) beyond pure SQL syntax. ## How is Vitess different from MySQL? MySQL is a popular open source database solution. MySQL delivers a fast, multi-threaded, multi-user, and robust SQL (Structured Query Language) database server. However, MySQL starts running into limitations with large data sizes or large numbers of concurrent users. Vitess is a database scaling system designed to be used with MySQL. It enables deploying, scaling and managing large clusters of MySQL instances with built-in sharding, high availability and connection pooling. ## How is Vitess different from RDS for MySQL? RDS for MySQL is a managed service from AWS which has many of the same limitations as open source or enterprise MySQL. ## How is Vitess different from AWS Aurora for MySQL? AWS Aurora for MySQL is a managed service from AWS which can scale beyond the limitations of RDS for MySQL. However, it cannot scale to the same extent as Vitess. ## Are foreign keys supported in Vitess? We generally discourage the use of foreign keys, and more specifically foreign key constraints. There may be unexpected consequences when using them in sharded keyspaces. However, you can use foreign key constraints when their scope is contained within a shard or unsharded keyspace. You will need to [configure](https://vitess.io/docs/user-guides/vschema-guide/foreign-keys/) Vitess with the desired level of support. Please note that if you do shard or re-shard an existing keyspqce with foreign keys, you will need to take extra steps to confirm they are working as intended. --- title: Components weight: 3 --- ## What is VTGate and how does it work? VTGate is a lightweight proxy server that sits between your application and your shards, which contain your data. 
----------------------------------------

