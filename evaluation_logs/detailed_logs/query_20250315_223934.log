DETAILED QUERY LOG - 2025-03-15 22:39:34
======================================================================

QUESTION: Where can I find troubleshooting resources in Vitess?

ANSWER: ### Troubleshooting Resources in Vitess
To find troubleshooting resources in Vitess, you can refer to the [troubleshooting documentation](#troubleshooting-docs). This documentation provides guidelines on how to collect information for troubleshooting, including:

* Collecting logs (vtgate, vttablet, underlying MySQL)
* Collecting metrics (vtgate, vttablet, underlying MySQL)
* Collecting other statistics (MySQL processlist, MySQL InnoDB engine status, etc.)
* Providing a summary/overview deployment document of your Vitess setup

Additionally, you can use various tools and features in Vitess to troubleshoot issues, such as:
* The `/queryz` page to inspect query statistics
* The `/debug/querylog` page to stream query logs in real-time
* The `tcpdump` command to capture traffic on the vtgate server

By following these guidelines and using these tools, you can effectively troubleshoot issues in your Vitess implementation.

METRICS:
  - Documents Retrieved: 4
  - Top Document Score: 0.7722737193107605
  - Response Time: 17182.01 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.7722737193107605
  Content:
----------------------------------------
you look at your vtgate start script or at a process listing via: ```sh ps -ef | grep vtgate ``` - You should see the vtgate port as the value of the -mysql_server_port parameter. Make a note of this port number. - Next, you need to determine which physical network interface the application traffic is coming into the vtgate server. Typically it could be something like eth0 or eno0, but you would verify by checking the output of: ```sh ip addr ``` - and matching up the ip address the application is using to access the vtgate instance. To actually capture the traffic (we assume you are using sudo) run: ```sh sudo tcpdump -i<interface> -s0 -n -nn -B 32768 -w /path/to/tempfile.dump port <tcpport> ``` Where: - <interface> is the physical network interface you determined earlier, e.g. eth0 - /path/to/tempfile.dump is the filesystem path to a location where you have sufficient space for the dump file. Note that in a production environment, a tcpdump of live traffic can generate a dumpfile of many gigabytes pretty quickly, so be careful. - <tcpport> is the port number you determined earlier that vtgate is listening on for MySQL traffic. When you are done, you can use this dump file to review these logs for any errors or issues. ## Collecting information for troubleshooting In order to troubleshoot issues occurring in your implementation of Vitess you will need to provide the community as much context as possible. When you reach out you should include, if possible, a summary/overview deployment document of what components are involved and how they interconnect, etc. Customers often maintain something like this for internal support purposes. Beyond the overview deployment document, we recommend that for the best experience, you collect as many of the items listed below as possible from production Vitess systems: - Logs (vtgate, vttablet, underlying MySQL) - Metrics (vtgate, vttablet, underlying MySQL) - Other statistics (MySQL processlist, MySQL InnoDB engine status, etc.) - Application DB pool configurations - Load balancer configurations (if in the MySQL connection path) - Historical load patterns --- title: Troubleshooting docs_nav_disable_expand: true weight: 4 ---
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.1644744724035263
  Content:
----------------------------------------
specific query is causing the problem. There are two approaches: * Inspect the `/queryz` page and look at the stats for all queries of that table. It is very likely that the problematic ones have already risen to the top of the page and may be color-coded red. If not, talking a few snapshots of the page and comparing the stats should help identify the problematic query. * Real-time stream from `/debug/querylog`, filtering out unwanted tables and observing the results to identify the problematic query. Once the query is identified, the remedy depends on the situation. It could be a rewrite of the query to be more efficient, the creation of an additional index, or it could be the shutdown of an abusive batch process. The above guidelines have not required you to inspect MySQL. Over time, Vitess has evolved by improving its observability every time there was an incident. However, there may still be situations where the above approach is insufficient. If so, you will need to resort to looking inside MySQL to find out the root cause. The actual identification of the root cause may not be as straightforward as described above. Sometimes, an incident is caused by multiple factors. In such cases, using first principles of troubleshooting and understanding how the components communicate with each other may be the only way to get to the bottom of a problem. If you have exhausted all the recommendations given so far and still have not found the root cause, you may have to directly troubleshoot the problem at the MySQL level. ### Elevated Error Rates The analysis for elevated error rates for read queries follows steps similar to elevated latency. You should essentially use the same drill down approach to identify the root cause. ### Transaction timeouts Transaction timeouts manifest as the following errors: ```text ERROR 1317 (HY000): vtgate: http://sougou-lap1:15001/: vttablet: rpc error: code = Aborted desc = transaction 1610909864463057369: ended at 2021-01-17 10:58:49.155 PST (exceeded timeout: 30s) (CallerID: userData1) ``` If you see such errors, you may have to do one of the following: * Increase the transaction timeout in vttablet by setting a higher value for `queryserver-config-transaction-timeout`. * Refactor the application code to finish the transaction sooner. It is recommended to minimize long running transactions in MySQL. This is because the efficiency of MySQL drastically drops as the number of concurrent transactions increases. ### Transaction connection limit errors If you encounter errors that contain the following text: `transaction pool connection limit exceeded`, it means that your connection pool for transactions is full and Vitess timed out waiting for a connection. This issue can have multiple root causes. If your transaction load is just spiky, then you may just have to increase the pool timeout to make the transaction wait longer for a connection. This can be increased by setting the `queryserver-config-txpool-timeout` flag in vttablet. The default value is one second. It is also possible that you have underprovisioned the transaction pool size. If so, you can increase 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.11036756634712219
  Content:
----------------------------------------
you need to do planned maintenance on the primary, it's best to first reparent to another replica with [`PlannedReparentShard`](../../reference/programs/vtctl/shards/#plannedreparentshard). --- title: Vitess sees the wrong tablet as primary description: Debug common issues with Vitess weight: 10 --- ## Vitess sees the wrong tablet as primary If you do a failover manually (not through Vitess), you'll need to tell Vitess which tablet corresponds to the new primary MySQL. Until then, writes will fail since they'll be routed to a read-only replica (the old primary). Use the [`TabletExternallyReparented`](../../reference/programs/vtctl/shards/#tabletexternallyreparented) command to tell Vitess the new primary tablet for a shard. Older versions of Vitess supported tools like [Orchestrator](https://github.com/github/orchestrator), which can be configured to call this automatically when a failover occurs. See our sample [orchestrator.conf.json](https://github.com/vitessio/vitess/blob/1129d69282bb738c94b8af661b984b6377a759f7/docker/orchestrator/orchestrator.conf.json#L131) for an example of this. --- title: Troubleshoot aliases: ['/docs/launching/troubleshooting/'] description: Debug common issues with Vitess weight: 2600 --- If there is a problem in the system, one or many alerts would typically fire. If a problem was found through means other than an alert, then the alert system needs to be iterated upon. When an alert fires, you have the following sources of information to perform your investigation: * Alert values * Graphs * Diagnostic URLs * Log files ### Find version of Vitess build ``` select @@version; ```
----------------------------------------

Document 4:
  Source: Unknown
  Score: 0.028553038835525513
  Content:
----------------------------------------
interaction between the components. Before starting, we assume that you have downloaded Vitess and finished the [Get Started](../../../get-started) tutorial. ## External tools Vitess relies on two external components, and we recommend that you choose them upfront: 1. [TopoServer](../../../concepts/topology-service/): This is the server in which Vitess stores its metadata. We recommend etcd if you have no other preference. 2. [MySQL](../../../overview/supported-databases/): Vitess supports MySQL/Percona Server 5.7 to 8.0. We recommend MySQL 8.0 for new installations. In this guide, we will be covering the case where the MySQL instances are managed by Vitess. A different section covers the details of running against [externally managed databases](../../configuration-advanced/unmanaged-tablet). ## Provisioning Some high level decisions have to be made about the number of cells you plan to deploy on. This will loosely tie into how many replicas you intend to run per MySQL primary. You are likely to deploy at least one replica per cell. Vitess resource consumption is mostly driven by QPS, but there may be variations depending on your use case. As a starting point, you can use a rule of thumb of provisioning about 1 CPU for every 1000QPS. This CPU will be divided between MySQL, vttablets and vtgates, about 1/3 each. As for memory, you can start with approximately 1GB per CPU provisioned for Vitess components. MySQL memory will be largely guided by the buffer pool size, which may take some trial and error or prior experience to tune. Resources for other servers like the toposerver, vtctld, Vtadmin and VTOrc are minimal. They are likely not going to exceed one CPU per server instance. ## Environment variables Setting up a few environment variables upfront will improve the manageability of the system: * `VTDATAROOT`: Setting up this value will make Vitess create the MySQL data files under this directory. Other Vitess binaries will also use this variable to locate such files as needed. If not specified, the default value is `/vt`. Typically, no other files get stored under this directory. However, many idiomatic deployments tend to reuse this as root directory for other purposes like log files, etc. * `VT_MYSQL_ROOT`: Informs Vitess about where to find the `mysqld` binary. If this is not specified, Vitess will try to find `mysqld` in the current `PATH`. Vitess will automatically detect the flavor of MySQL and will adjust its behavior accordingly. You can override this behavior by specifying an explicit flavor with the `--db_flavor` command line argument to the various components. ## Backups Backups will need to be shared across vttablet instances and multiple cells. You need to plan and allocate shared storage that must be accessible from all cells. Depending on the choice made, you will need to prepare a group of command line arguments to include with the Vitess components to launch. Here is an example: ```text --backup_storage_implementation file --file_backup_storage_root <mounted_path_dir> ``` {{< warning >}} When using the file backup storage engine the backup storage root path must be on shared storage to provide a global view of backups to all vitess components. {{< /warning 
----------------------------------------

