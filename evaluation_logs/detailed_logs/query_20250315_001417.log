DETAILED QUERY LOG - 2025-03-15 00:14:17
======================================================================

QUESTION: What is the topology service in Vitess?

ANSWER: ### Topology Service Overview
The Topology Service in Vitess is a set of backend processes that provide a distributed locking service and store topology data. It is a key-value store that enables tablets to coordinate among themselves as a cluster, allows Vitess to discover tablets and route queries, and stores Vitess configuration that persists between server restarts.

### Key Functions
The Topology Service has two main functions:
* It serves as a repository for topology metadata.
* It acts as a distributed lock manager.

### Characteristics
The Topology Service is designed to be highly available and consistent, but it has higher latency and very low throughput. It is exposed to all Vitess components and is used for various purposes, including:
* Tablet coordination
* Tablet discovery and query routing
* Storing Vitess configuration data

### Implementation
Vitess uses a plug-in system to support various backends for storing topology data, with `etcd2` being the default topology service plugin. A Vitess cluster has one global topology service and a local topology service in each cell, each storing different types of data.

METRICS:
  - Documents Retrieved: 3
  - Top Document Score: 0.9997178912162781
  - Response Time: 17533.92 ms
  - Retrieval Time (est.): 12273.75 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.9997178912162781
  Content:
----------------------------------------
lock service --- The [*Topology Service*](../../user-guides/configuration-basic/global-topo/) is a set of backend processes running on different servers. Those servers store topology data and provide a distributed locking service. Vitess uses a plug-in system to support various backends for storing topology data, which are assumed to provide a distributed, consistent key-value store. The default topology service plugin is `etcd2`. The topology service exists for several reasons: * It enables tablets to coordinate among themselves as a cluster. * It enables Vitess to discover tablets, so it knows where to route queries. * It stores Vitess configuration provided by the database administrator that is needed by many different servers in the cluster, and that must persist between server restarts. A Vitess cluster has one global topology service, and a local topology service in each cell. ## Global Topology The global topology service stores Vitess-wide data that does not change frequently. Specifically, it contains data about keyspaces and shards as well as the primary tablet alias for each shard. The global topology is used for some operations, including reparenting and resharding. By design, the global topology service is not used a lot. In order to survive any single cell going down, the global topology service should have nodes in multiple cells, with enough to maintain quorum in the event of a cell failure. ## Local Topology Each local topology contains information related to its own cell. Specifically, it contains data about tablets in the cell, the keyspace graph for that cell, and the replication graph for that cell. The local topology service must be available for Vitess to discover tablets and adjust routing as tablets come and go. However, no calls to the topology service are made in the critical path of serving a query at steady state. That means queries are still served 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.9993163347244263
  Content:
----------------------------------------
introducing additional layers of connection pooling, ensuring that the backend MySQL instances are not overwhelmed. --- title: Topology weight: 4 --- ## What is the topology service? How does it work? The Topology Service is a set of backend processes. This service is exposed to all Vitess components. It delivers a key/value service that is highly available and consistent, while being offset by having higher latency cost and very low throughput. The Topology Service is used for several things by Vitess: * It enables tablets to coordinate among themselves as a cluster. * It enables VTGate to discover tablets, so it knows where to route queries. * It stores Vitess configuration provided by the administrator which is required by the different components in the Vitess cluster and that must persist between server restarts. The main functions the Topology Service provides are: * It is both a repository for topology metadata and a distributed lock manager. * It is used to store configuration data about the Vitess cluster. It stores small data structures (a few hundred bytes) per object. * E.g. information about the Keyspaces, the Shards, the Tablets, the Replication Graph, and the Serving Graph. * It supports a watch interface that signals a client when changes occur on an object. This is used, for instance, by VTGate to know when the VSchema changes. * It supports primary election. * It supports quorum reads and writes. ## What Topology servers can I use with Vitess? Vitess uses a plugin implementation to support multiple backend technologies for the Topology Service. The servers currently supported are as follows: * etcd * ZooKeeper The Topology Service interfaces are defined in our code in go/vt/topo/, specific implementations are in go/vt/topo/<name>, and we also have a set of unit tests for it in go/vt/topo/test. {{< 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.9960945248603821
  Content:
----------------------------------------
a combination of a `mysqld` process and a corresponding `vttablet` process, usually running on the same machine. Each tablet is assigned a *tablet type*, which specifies what role it currently performs. Queries are routed to a tablet via a [VTGate](../vtgate) server. ## Tablet Types See the user guide [VTTablet Modes](../../user-guides/configuration-basic/vttablet-mysql/) for more information. * **primary** - A *replica* tablet that happens to currently be the MySQL primary for its shard. * **master** - Same as **primary**. Deprecated. * **replica** - A MySQL replica that is eligible to be promoted to *primary*. Conventionally, these are reserved for serving live, user-facing requests (like from the website's frontend). * **rdonly** - A MySQL replica that cannot be promoted to *primary*. Conventionally, these are used for background processing jobs, such as taking backups, dumping data to other systems, heavy analytical queries and MapReduce. * **backup** - A tablet that has stopped replication at a consistent snapshot, so it can upload a new backup for its shard. After it finishes, it will resume replication and return to its previous type. * **restore** - A tablet that has started up with no data, and is in the process of restoring itself from the latest backup. After it finishes, it will begin replicating at the GTID position of the backup, and become either *replica* or *rdonly*. * **drained** - A tablet that has been reserved by a Vitess background process (such as rdonly tablets for resharding). --- title: Topology Service description: Also known as the TOPO or lock service --- The [*Topology Service*](../../user-guides/configuration-basic/global-topo/) is a set of backend processes running on different servers. Those servers store topology data and provide a distributed locking service. Vitess uses a plug-in system to support various backends for storing topology data, which are assumed to provide a distributed, consistent key-value store. 
----------------------------------------

