DETAILED QUERY LOG - 2025-03-16 22:08:42
======================================================================

QUESTION: What are the two main paths (data path and control path) in Vitess that can be secured using TLS?

ANSWER: ### Securing Vitess Paths

The two main paths in Vitess that can be secured using TLS are:
* **Data Path**: This is the primary path where sensitive information flows, and securing it is the main focus.
* **Control Path** (or meta-data path): This path may not require encryption in all deployment models, but it's essential to evaluate your specific needs based on compliance directives, threat models, and risk management frameworks.

You can find more information about these paths [here](../../configuration-basic/ports/).

METRICS:
  - Documents Retrieved: 4
  - Top Document Score: 0.9971574544906616
  - Response Time: 16822.71 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.9971574544906616
  Content:
----------------------------------------
the server (`vtgate`). ### Inspecting trace spans in the Jaeger web UI This is beyond the scope of this guide. However, in general, if you have set everything above up correctly and you have instrumented and executed some queries appropriately, you can now access the Jager web UI to look at the spans recorded. If you are using the local docker container version of Jaeger, you can access the web UI in your browser at http://localhost:16686/. You should be able to search for and find spans based on the `trace-id` or `span-id` with which your query/queries were instrumented. Once you find a query, you will be able to see the trace events emitted by different parts of the code as the query moves through `vtgate` and the `vttablet(s)` involved in the query. An example would look something like this: ![](../trace1.png) --- title: Securing Vitess Using TLS weight: 60 --- ## Introduction Vitess has a number of different components that, in most real-world configurations, connect to each other over the network. Many organizations require, for compliance or practical reasons, that these communications be encrypted and/or authenticated. This guide will provide an overview of these client/server combinations between components, what the encryption and authentication options are, and a walkthrough on how to configure Vitess to use them. You can read more about our [transport security model](../../../reference/features/transport-security-model/) in our references. There are two paths a data path and a control path that could be secured. The focus in the guide will be to secure the data path. You can read more about the two paths [here](../../configuration-basic/ports/). Note that the sensitive information mainly flows over the data path, and depending on your deployment model, you may not have to encrypt all of the the control or meta-data path. We recommend that you evaluate your needs in the context of your compliance directives, threat model and risk management framework. It should also be noted that while Vitess provides the mechanism for securing these communication channels, it does **not** manage the certificate management tasks like: * Securely generating private keys * Issuing server certificates * Issuing, if necessary, client certificates * Certificate rotation * Certificate audit Indeed, the hardest part of deploying TLS with Vitess in a large organization may be to integrate with whatever certificate policies and procedures the organization mandates. It should be noted that the manual issuing and rotation of certificates in a Vitess environment of a non-trivial size is impractical, and some provisioning and configuration management automation will need to be built. ## Protocols involved Of all the data, meta-data and control paths enumerated above, they use one of three protocols: * MySQL binary protocol * gRPC (using HTTP/2 as transport) * HTTP ## Encryption All three the protocol types above use TLS in one form or another to encrypt communications. Therefore the basics around encrypting a specific client to server communication is straightforward: * Server-side: * Generate a CA private key and cert as the root for your certificate hierarchy. * 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.9320159554481506
  Content:
----------------------------------------
the data, meta-data and control paths enumerated above, they use one of three protocols: * MySQL binary protocol * gRPC (using HTTP/2 as transport) * HTTP ## Encryption All three the protocol types above use TLS in one form or another to encrypt communications. Therefore the basics around encrypting a specific client to server communication is straightforward: * Server-side: * Generate a CA private key and cert as the root for your certificate hierarchy. * (optionally) Generate intermediate keys to serve as signing keys for your server certificates. We will not cover this case in this document. * Generate a private key for the server component involved. * Generate a CSR using the private key. * Use the CA key material and the CSR to generate/sign the server certificate. * Install the server cert and private key using the appropriate Vitess options for the component in question. * If required, adjust other Vitess component options to enforce/require TLS-only communications. ## Server authentication In addition to encrypting the connection, you may want or need to configure client-side server authentication. This is the process by which the client verifies that the server it is trying to establish a TLS connection to is who they claim to be, and not an imposter or man-in-the-middle. We achieve this by: * Client-side: * Install the CA cert used by your certificate issuing process to sign the server component certificates. * Adjust the Vitess client component options to verify the server certificate using the installed CA cert. This would typically involve specifying the CA cert, as well as the server or common name to expect from the server component, if it isn't the same as the DNS name (or has an IP SAN configured). ## Client authentication Client authentication in Vitess can take two forms, depending on the protocol in question: * TLS client certificate authentication (also known as mTLS) * Username/password authentication; this is only an option for the connections involving the MySQL protocol. ## Walkthroughs We will now cover how to setup the various TLS component combinations. We will start with the data path, then move on to the control paths. We will handle [encryption](#encryption) and [server authentication](#server-authentication) together, and then handle [client authentication](#client-authentication) separately. ### Certificate generation As discussed above, large organizations will often have established tools to secure a TLS certificate hierarchy and issue certificates. For the purpose of these walkthroughs, we could use bare `openssl` commands to step through every detail. However, since we consider this an implementation detail that is likely to vary from user to user, we will leverage a shell-script-based tool called [easy-rsa](https://github.com/OpenVPN/easy-rsa) that uses `openssl` under the covers, and hides much of the complexity. This tool has been around for many years as part of the OpenVPN project, and can perform all the steps to setup a CA, generate server certificates and also client certificates if desired. Since `easy-rsa` is just a set of shell scripts, if you require a closer understanding of how every step works, 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.9103713631629944
  Content:
----------------------------------------
topo service as `primary`, and the new one as `secondary`. * then, change the configuration to use the new one as `primary`, and the old one as `secondary`. Reverse the lock order here. * then rollout a configuration to just use the new service. --- title: Transport Security Model weight: 12 aliases: ['/docs/user-guides/transport-security-model/','/docs/reference/transport-security-model/'] --- Vitess exposes a few RPC services and internally uses RPCs. These RPCs can optionally utilize secure transport options to use TLS over the gRPC HTTP/2 transport protocol. This document explains how to use these features. Finally, we briefly cover how to secure the MySQL protocol transport to VTGate. ## Overview The following diagram represents all the RPCs we use in a Vitess cluster via gRPC: ![Vitess Transport Security Model Diagram](../../img/vitesstransportsecuritymodel.png) There are two main categories: * Internal RPCs: They are used to connect Vitess components. * Externally visible RPCs: They are used by the app to talk to Vitess. Note that it is not necessary to use this gRPC interface. It is still possible to instead use the MySQL protocol to VTGate, which is not covered in this document. A few features in the Vitess ecosystem depend on authentication including Caller ID and table ACLs. ## Caller ID Caller ID is a feature provided by the Vitess stack to identify the source of queries. There are two different Caller IDs: * Immediate Caller ID: It represents the secure client identity when it enters the Vitess side: - It is a single string representing the user connecting to Vitess (VTGate). - It is authenticated by the transport layer used. - It can be used by the Vitess TableACL feature. * Effective Caller ID: It provides detailed information on the individual caller process: - It contains more information about the caller: principal, component, and sub-component. - It is provided by the application layer. - It is not authenticated. - It is exposed in query logs. Enabling it can be useful for debugging issues like the source of a slow query. ## gRPC Transport ### gRPC Encrypted Transport When using gRPC transport, Vitess can use the usual TLS security features. Please note that familiarity with TLS is necessary here: * Any Vitess server can be configured to use TLS with the following command line parameters: - `--grpc_cert`, `--grpc_key`: server cert and key to use. - `--grpc_ca` (optional): client cert chains to trust. If specified, the client must then use a certificate signed by one of the CA certs in the provided file. * A Vitess go client can be configured with symmetrical parameters to enable TLS: - `--[vtgate|tablet]_grpc_ca`: list of server cert signers to trust. I.E. the client will only connect to servers presenting a cert signed by one of the CAs in this file. - `--[vtgate|tablet]_grpc_server_name`: common name of the server cert to trust. Instead of the hostname used to connect or IP SAN if using an IP to connect. - `--[vtgate|tablet]_grpc_cert`, `--[vtgate|tablet]_grpc_key`: client side cert and key to use in cases when the server requires client authentication. 
----------------------------------------

Document 4:
  Source: Unknown
  Score: 0.8219255805015564
  Content:
----------------------------------------
to require all TCP/IP clients to use TLS, you can use the MySQL server option `require_secure_transport`, or you can enforce it on a per MySQL user basis by using the `REQUIRE SSL` option when creating or altering a MySQL-level user. See the MySQL documentation for details. Restart your MySQL server to make these MySQL server option configuration changes active. Now, configure vttablet to connect to MySQL using the necessary parameters, verifying the CA certificate: ```bash $ cp /home/user/CA/pki/ca.crt ~/config/ ``` Add the vttablet parameters: ``` --db_ssl_ca /home/user/config/ca.crt --db_flags 1073743872 --db_server_name mysql1 ``` Restart the vttablet. Note that the `db_server_name` parameter value will differ depending on your issued certificate common name; and is unnecessary if the certificate common name matches the DNS name vttablet is using to connect to the MySQL server. The `1073743872` is a combination of the MySQL `CLIENT_SSL` (2048) and `CLIENT_SSL_VERIFY_SERVER_CERT` flags (1073741824); which means "encrypt the connection to MySQL *and* verify the SSL cert presented by the server". If you just wish to encrypt the vttablet -> MySQL server communication and you do not care about server certificate validation, you can just use this vttablet flag instead: ``` --db_flags 2048 ``` Note that using the above `db_flags` will also result in the MySQL to MySQL communication for replication between the replica/rdonly instances of a Vitess shard and its primary to be encrypted, as long as the upstream MySQL instance the replica is connecting to has been configured correctly to support TLS MySQL protocol connections (see above). ## vttablet data and control paths In Vitess, communication between vtgate and vttablet instances are via gRPC. gRPC uses HTTP/2 as a transport protocol, but by default this is not encrypted in Vitess. To secure this data path you need to, at a minimum, configure TLS for gRPC on the server (vttablet) side. Other components, as detailed above, also connect to vttablet via gRPC. After configuring vttablet gRPC for TLS, you will need to configure all these components (vtgate, other vttablets, vtctld) explicitly to connect using TLS to vttablet via gRPC, or you will have a partially or wholly non-functional system. #### vtgate to vttablet First, generate a certificate for use by vttablet: ```bash $ cd ~/CA/ $ ./easyrsa gen-req vttablet1 nopass Note: using Easy-RSA configuration from: /home/user/CA/vars Using SSL: openssl OpenSSL 1.1.1g FIPS 21 Apr 2020 Generating a RSA private key ..................................+++++ .....+++++ writing new private key to '/home/user/CA/pki/easy-rsa-209692.tdDNNt/tmp.hwhw8x' ----- You are about to be asked to enter information that will be incorporated into your certificate request. What you are about to enter is what is called a Distinguished Name or a DN. There are quite a few fields but you can leave some blank For some fields there will be a default value, If you enter '.', the field will be left blank. ----- Country Name (2 letter code) [US]: State or Province Name (full name) [California]: Locality Name (eg, city) [Mountain View]: Organization Name (eg, company) [PlanetScale Inc]: Organizational Unit Name (eg, section) [Operations]: Common Name (eg: your 
----------------------------------------

