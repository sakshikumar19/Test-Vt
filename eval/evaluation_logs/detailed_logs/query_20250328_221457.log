DETAILED QUERY LOG - 2025-03-28 22:14:57
======================================================================

QUESTION: How do I access the VTOrc UI after having deployed it using the operator?

ANSWER: ### Accessing the VTOrc UI
To access the VTOrc UI after deploying it using the Vitess Operator, you can use port-forwarding to access the UI, which runs on port `15000` of the container. 

The context does not provide a specific command to set up port-forwarding. However, you can use the `kubectl port-forward` command to forward traffic from your local machine to the VTOrc container. 

Please note that the exact command may vary depending on your Kubernetes setup and the name of the VTOrc pod. You may need to check the Kubernetes documentation or your cluster's configuration for more information on how to set up port-forwarding. 

Once you have set up port-forwarding, you can access the VTOrc UI by navigating to `http://localhost:15000` in your web browser. 

Additionally, to use the UI, the `--port` flag must be provided. However, the context does not specify how to provide this flag when deploying VTOrc using the operator. You may need to consult the Vitess Operator documentation or the VTOrc reference page for more information on how to configure the UI.

METRICS:
  - Documents Retrieved: 3
  - Top Document Score: 1.1265323638916016
  - Response Time: 18845.11 ms
  - Retrieval Time (est.): 13191.58 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 1.1265323638916016
  Content:
----------------------------------------
Running with Vitess Operator description: How to configure Vitess Kubernetes Operator to run VTOrc --- ## Get Started The Vitess operator deploys one VTOrc instance for each keyspace that it is configured for. Please look at the [VTOrc reference page](../../programs/vtorc) to know all the flags that VTOrc accepts. ## Configuring VTOrc in Vitess Operator The VTOrc can be configured to run for a given keyspace by specifying the `vitessOrchestrator` specification as part of the `keyspace` spec. Resource limits and requests can be specified as part of the configuration and the default behaviour of VTOrc can be changed by specifying any desired flags in the `extraFlags` field. The VTOrc UI runs on the port `15000` of the container and port-forwarding can be setup to access it. ## Example Configuration An example deployment from the VTOrc [end to end test](https://github.com/planetscale/vitess-operator/tree/main/test/endtoend) on the Vitess Operator looks like: ```yaml keyspaces: - name: commerce durabilityPolicy: semi_sync turndownPolicy: Immediate vitessOrchestrator: resources: limits: memory: 128Mi requests: cpu: 100m memory: 128Mi extraFlags: recovery-period-block-duration: 5s ``` The full configuration file is available [here](https://github.com/planetscale/vitess-operator/blob/main/test/endtoend/operator/101_initial_cluster_vtorc_vtadmin.yaml). --- title: UI, API and Metrics --- # UI In order to use UI, `--port` flag has to be provided. Currently, the `/debug/status` lists the recent recoveries that VTOrc has performed. ![VTOrc-recent-recoveries](../img/VTOrc-Recent-Recoveries.png) # APIs VTOrc supports the following APIs which can be used for monitoring and changing the behaviour of VTOrc. | New API | Additional notes | |----------------------------------|---------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------------| | `/api/problems` | This API lists all the instances that have any problems in them. The problems range from replication not running to errant GTIDs. The new API also supports filtering using the keyspace and shard name | | `/api/disable-global-recoveries` | This API disables the global recoveries in VTOrc. This makes it so that VTOrc doesn't repair any failures it detects. | | `/api/enable-global-recoveries` | This API 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.9421204805374145
  Content:
----------------------------------------
trademarks of their respective owners. Type 'help;' or '\h' for help. Type '\c' to clear the current input statement. mysql> show tables; +-----------------------+ | Tables_in_vt_commerce | +-----------------------+ | corder | | customer | | product | +-----------------------+ 3 rows in set (0.00 sec) ``` </br> You can also now browse and administer your new Vitess cluster using the [VTAdmin](../../concepts/vtadmin) UI at the following URL: ```text http://localhost:14201 ``` </br> VTOrc is also setup as part of the initialization. You can look at its user-interface at: ```text http://localhost:16000 ``` ## Summary In this example, we deployed a single unsharded keyspace named `commerce`. Unsharded keyspaces have a single shard named `0`. The following schema reflects a common ecommerce scenario that was created by the script: ```sql create table product ( sku varchar(128), description varchar(128), price bigint, primary key(sku) ); create table customer ( customer_id bigint not null auto_increment, email varchar(128), primary key(customer_id) ); create table corder ( order_id bigint not null auto_increment, customer_id bigint, sku varchar(128), price bigint, primary key(order_id) ); ``` The schema has been simplified to include only those fields that are significant to the example: * The `product` table contains the product information for all of the products. * The `customer` table has a `customer_id` that has an `auto_increment`. A typical customer table would have a lot more columns, and sometimes additional detail tables. * The `corder` table (named so because `order` is an SQL reserved word) has an `order_id` auto-increment column. It also has foreign keys into `customer(customer_id)` and `product(sku)`. ## Next Steps You can now proceed with [MoveTables](../../user-guides/migration/move-tables). Or alternatively, if you would like to teardown your example: ```bash ./401_teardown.sh rm -rf vtdataroot ``` --- title: Vitess Operator for Kubernetes weight: 1 featured: true aliases: ['/docs/tutorials/kubernetes/','/user-guide/sharding-kubernetes.html', '/docs/get-started/scaleway/','/docs/get-started/kubernetes/'] --- PlanetScale provides a [Vitess Operator for Kubernetes](https://github.com/planetscale/vitess-operator), released under the 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.6506888151168823
  Content:
----------------------------------------
will wait for the operator (k8s install) or `vtorc` (local install) to promote one of the new tablets to `PRIMARY` before proceeding: ### Using Operator ```bash $ kubectl apply -f 201_customer_tablets.yaml ``` After a few minutes the pods should appear running: ```bash $ kubectl get pods -n example NAME READY STATUS RESTARTS AGE example-90089e05-vitessbackupstorage-subcontroller 1/1 Running 0 8m45s example-commerce-x-x-zone1-vtorc-c13ef6ff-776f5676cb-7rcb7 1/1 Running 0 7m32s example-customer-x-x-vtbackup-init-115abf93 0/1 Completed 0 112s example-customer-x-x-zone1-vtorc-53d270f6-7df84448fb-hnnps 1/1 Running 0 112s example-etcd-faf13de3-1 1/1 Running 0 8m45s example-etcd-faf13de3-2 1/1 Running 0 8m45s example-etcd-faf13de3-3 1/1 Running 0 8m45s example-vttablet-zone1-1250593518-17c58396 3/3 Running 0 112s example-vttablet-zone1-2469782763-bfadd780 3/3 Running 0 7m32s example-vttablet-zone1-2548885007-46a852d0 3/3 Running 0 7m32s example-vttablet-zone1-3778123133-6f4ed5fc 3/3 Running 0 112s example-zone1-vtadmin-c03d7eae-6db4c646bc-kslw9 2/2 Running 0 8m45s example-zone1-vtctld-1d4dcad0-5674cc8448-qqjv7 1/1 Running 2 (8m30s ago) 8m45s example-zone1-vtgate-bc6cde92-5bfb8f645-9flp9 1/1 Running 3 (8m10s ago) 8m45s ``` Again, the operator will promote one of the tablets to `PRIMARY` implicitly for you. Make sure that you restart the port-forward after launching the pods has completed: ```bash $ killall kubectl ./pf.sh & ``` ### Using a Local Deployment ```bash $ ./201_customer_tablets.sh ``` ## Show All Tablets ```bash $ mysql -e "show vitess_tablets" +-------+----------+-------+------------+---------+------------------+-----------+----------------------+ | Cell | Keyspace | Shard | TabletType | State | Alias | Hostname | PrimaryTermStartTime | +-------+----------+-------+------------+---------+------------------+-----------+----------------------+ | zone1 | commerce | 0 | PRIMARY | SERVING | zone1-0000000100 | localhost | 2023-01-04T17:59:37Z | | zone1 | commerce | 0 | REPLICA | SERVING | zone1-0000000101 | localhost | | | zone1 | commerce | 0 | RDONLY | SERVING | zone1-0000000102 | localhost | | | zone1 | customer | 0 | PRIMARY | SERVING | zone1-0000000201 | localhost | 2023-01-04T18:00:22Z | | zone1 | customer | 0 | REPLICA | SERVING | zone1-0000000200 | localhost | | | zone1 | customer | 0 | RDONLY | SERVING | zone1-0000000202 | localhost | | +-------+----------+-------+------------+---------+------------------+-----------+----------------------+ ``` 
----------------------------------------

