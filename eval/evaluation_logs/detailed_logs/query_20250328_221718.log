DETAILED QUERY LOG - 2025-03-28 22:17:18
======================================================================

QUESTION: Can I create my own durability policy for my specific use case?

ANSWER: ### Creating a Custom Durability Policy
According to the provided context, the possible values for durability policy include 'semi_sync', 'none', and **others as dictated by registered plugins**. This suggests that it is possible to create a custom durability policy by registering a plugin.

However, the context does not provide information on how to create or register a custom plugin for a durability policy. 

To determine if you can create your own durability policy, you would need more information on the plugin registration process and the requirements for creating a custom durability policy.

METRICS:
  - Documents Retrieved: 3
  - Top Document Score: 0.16976587772369384
  - Response Time: 16465.87 ms
  - Retrieval Time (est.): 11526.11 ms

RETRIEVED DOCUMENTS:
Document 1:
  Source: Unknown
  Score: 0.16976587772369384
  Content:
----------------------------------------
outputs --server string server to use for the connection (required) --topo-global-root string the path of the global topology data in the global topology server (default "/vitess/global") --topo-global-server-address strings the address of the global topology server(s) (default [localhost:2379]) --topo-implementation string the topology implementation to use (default "etcd2") ``` ### SEE ALSO * [vtctldclient](../) - Executes a cluster management command on the remote vtctld server or alternatively as a standalone binary using --server=internal. --- title: RunHealthCheck series: vtctldclient --- ## vtctldclient RunHealthCheck Runs a healthcheck on the remote tablet. ``` vtctldclient RunHealthCheck <tablet_alias> ``` ### Options ``` -h, --help help for RunHealthCheck ``` ### Options inherited from parent commands ``` --action_timeout duration timeout to use for the command (default 1h0m0s) --compact use compact format for otherwise verbose outputs --server string server to use for the connection (required) --topo-global-root string the path of the global topology data in the global topology server (default "/vitess/global") --topo-global-server-address strings the address of the global topology server(s) (default [localhost:2379]) --topo-implementation string the topology implementation to use (default "etcd2") ``` ### SEE ALSO * [vtctldclient](../) - Executes a cluster management command on the remote vtctld server or alternatively as a standalone binary using --server=internal. --- title: SetKeyspaceDurabilityPolicy series: vtctldclient --- ## vtctldclient SetKeyspaceDurabilityPolicy Sets the durability-policy used by the specified keyspace. ### Synopsis Sets the durability-policy used by the specified keyspace. Durability policy governs the durability of the keyspace by describing which tablets should be sending semi-sync acknowledgements to the primary. Possible values include 'semi_sync', 'none' and others as dictated by registered plugins. To set the durability policy of customer keyspace to semi_sync, you would use the following command: SetKeyspaceDurabilityPolicy --durability-policy='semi_sync' customer ``` vtctldclient SetKeyspaceDurabilityPolicy [--durability-policy=policy_name] <keyspace name> ``` ### Options ``` --durability-policy string Type of durability to enforce for this keyspace. Default is none. Other values include 
----------------------------------------

Document 2:
  Source: Unknown
  Score: 0.13363394737243653
  Content:
----------------------------------------
### Options inherited from parent commands ``` --action_timeout duration timeout to use for the command (default 1h0m0s) --compact use compact format for otherwise verbose outputs --server string server to use for the connection (required) --topo-global-root string the path of the global topology data in the global topology server (default "/vitess/global") --topo-global-server-address strings the address of the global topology server(s) (default [localhost:2379]) --topo-implementation string the topology implementation to use (default "etcd2") ``` ### SEE ALSO * [vtctldclient](../) - Executes a cluster management command on the remote vtctld server or alternatively as a standalone binary using --server=internal. --- title: CreateKeyspace series: vtctldclient --- ## vtctldclient CreateKeyspace Creates the specified keyspace in the topology. ### Synopsis Creates the specified keyspace in the topology. For a SNAPSHOT keyspace, the request must specify the name of a base keyspace, as well as a snapshot time. ``` vtctldclient CreateKeyspace <keyspace> [--force|-f] [--type KEYSPACE_TYPE] [--base-keyspace KEYSPACE --snapshot-timestamp TIME] [--served-from DB_TYPE:KEYSPACE ...] [--durability-policy <policy_name>] [--sidecar-db-name <db_name>] ``` ### Options ``` -e, --allow-empty-vschema Allows a new keyspace to have no vschema. --base-keyspace string The base keyspace for a snapshot keyspace. --durability-policy string Type of durability to enforce for this keyspace. Default is none. Possible values include 'semi_sync' and others as dictated by registered plugins. (default "none") -f, --force Proceeds even if the keyspace already exists. Does not overwrite the existing keyspace record. -h, --help help for CreateKeyspace --sidecar-db-name string (Experimental) Name of the Vitess sidecar database that tablets in this keyspace will use for internal metadata. (default "_vt") --snapshot-timestamp string The snapshot time for a snapshot keyspace, as a timestamp in RFC3339 format. --type cli.KeyspaceTypeFlag The type of the keyspace. (default NORMAL) ``` ### Options inherited from parent commands ``` --action_timeout duration timeout to use for the command (default 1h0m0s) --compact use compact format for otherwise verbose outputs --server 
----------------------------------------

Document 3:
  Source: Unknown
  Score: 0.08785462975502013
  Content:
----------------------------------------
\ --instance-poll-time "1s" \ --topo-information-refresh-duration "30s" \ --alsologtostderr ``` You can optionally add a `clusters_to_watch` flag that contains a comma separated list of keyspaces or `keyspace/shard` values. If specified, VTOrc will manage only those clusters. ### Durability Policies All the failovers that VTOrc performs will be honoring the [durability policies](../../configuration-basic/durability_policy). Please be careful in setting the desired durability policies for your keyspace because this will affect what situations VTOrc can recover from and what situations will require manual intervention. ### Running VTOrc using the Vitess Operator To find information about deploying VTOrc using Vitess Operator please take a look at this [page](../../../reference/vtorc/running_with_vtop). --- title: VTTablet and MySQL weight: 8 --- Let us assume that we want to bring up a single unsharded keyspace. The first step is to identify the number of replicas (including the primary) we would like to deploy. We should also make a decision about how to distribute them across the cells. Vitess requires you to assign a globally unique id (tablet UID) to every vttablet. This has to be an unsigned 32-bit integer. This is a legacy requirement derived from the fact that the MySQL server id (also an unsigned 32-bit integer) used to be the same as the tablet uid. This is not the case any more. In terms of mapping these components to machines, Vitess allows you to run multiple of these on the same machine. If this is the case, you will need to assign non-conflicting ports for these servers to listen on. VTTablet and MySQL are meant to be brought up as a pair within the same machine. By default, vttablet will connect to its MySQL over a unix socket. Let us look at the steps to bring up the first pair for an unsharded keyspace `commerce` in cell1 and a tablet 
----------------------------------------

